name: GraalVM Native Image

# https://blogs.oracle.com/developers/post/building-cross-platform-native-images-with-graalvm
# https://github.com/aws-actions/configure-aws-credentials
# https://www.graalvm.org/latest/docs/

# native-image -jar tcpping.jar --no-fallback --static --libc=musl --gc=G1 -march=native -H:+BuildReport -H:Name=tcpping-linux
# native-image -jar tcpping.jar --no-fallback --static --gc=G1 -march=native -H:+BuildReport -H:Name=tcpping-linux
# native-image -jar tcpping.jar --no-fallback --static --gc=G1 -H:+BuildReport -H:Name=tcpping-linux

# native-image -jar tcpping.jar --no-fallback --static --gc=G1 -H:+BuildReport -H:Name=tcpping-linux

# https://www.graalvm.org/latest/reference-manual/native-image/guides/build-static-executables/

on:
    workflow_dispatch:
    push:
        tags:
            - "*"

env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ngmaibulat/tcping
    IMAGE_TAG: 0.0.${{ github.run_number }}
    SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_TOKEN }}

jobs:
    Run:
        runs-on: ubuntu-latest
        steps:
            - name: Check AWS CLI
              run: |
                  which aws
                  aws --version

            - uses: actions/checkout@v3

            - name: Install Snapcraft
              uses: samuelmeuli/action-snapcraft@v2

            # You can now run Snapcraft shell commands
            - name: Use Snapcraft
              run: snapcraft whoami

            - name: GitHub Action for GraalVM
              uses: graalvm/setup-graalvm@v1 # https://github.com/marketplace/actions/github-action-for-graalvm
              with:
                java-version: '20.0.1'
                distribution: 'graalvm' # New 'distribution' option

            - name: Run single command
              run: echo "running pwd"; pwd

            - name: Build via Gradle
              run: ./gradlew build

            - name: JPackage
              run: |
                  echo "https://docs.oracle.com/en/java/javase/20/docs/specs/man/jpackage.html"
                  rm -fr install
                  mkdir install
                  cp build/libs/tcpping-all.jar install/tcpping.jar
                  jpackage --version

            - name: Make Native Image
              run: |
                  cd install
                  # next 3 lines are not used
                  ls -la /usr/lib/x86_64-linux-gnu/libz.so.1
                  cp /usr/lib/x86_64-linux-gnu/libz.so.1 ./libz.so.1
                  cp /lib/x86_64-linux-gnu/libc.so.6 ./libc.so.6
                  native-image -jar tcpping.jar --no-fallback -H:+BuildReport -H:Name=tcpping-linux
                  chmod +x tcpping-linux
                  ./tcpping-linux

            - name: Set up AWS credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                aws-access-key-id: ${{ secrets.AWS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: 'eu-central-1'

            - name: Upload to S3
              run: |
                  dt=$(date +%Y-%m-%d)
                  aws s3 sync install s3://ngm-dev-s3/tcpping-$dt/linux
                  aws s3 sync install-macos s3://ngm-dev-s3/tcpping-$dt/macos
            
            - name: Create Snap Package
              run: |
                  ls -la
            
            - name: Upload Snap Package
              run: |
                  ls -la

            
            - name: Create Docker Image
              uses: docker/build-push-action@v4
              with:
                context: .
                # dockerfile: Dockerfile.native # Specify custom Dockerfile
                push: false
                tags: ${{ ENV.REGISTRY }}/${{ ENV.IMAGE_NAME }}:${{ ENV.IMAGE_TAG }}


            - name: Log in to registry
              # This is where you will update the personal access token to GITHUB_TOKEN
              run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin


            - name: Push image
              run: |
                IMG=${{ ENV.REGISTRY }}/${{ ENV.IMAGE_NAME }}
                IMAGE=${{ ENV.REGISTRY }}/${{ ENV.IMAGE_NAME }}:${{ ENV.IMAGE_TAG }}
                LATEST=${{ ENV.REGISTRY }}/${{ ENV.IMAGE_NAME }}:latest
                docker tag $IMAGE $LATEST
                docker push $IMG --all-tags --quiet
            
            - name: Upload Docker Image
              run: |
                  docker images
                  which podman
